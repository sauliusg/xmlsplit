#! /bin/sh
#!perl --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Split concatenated XML file stream into separate XML files and run
#  the program that is specified on the command line, in the manner
#  'xargs' does it for the arguments read from STDIN.
#**

use strict;
use warnings;

BEGIN {
    use Cwd qw(abs_path);
    my $base_dir = abs_path(__FILE__);
    $base_dir =~ /(.*)\/[^\/]+$/;
    $base_dir = $1;
    $base_dir =~ s/\/(?:bin|scripts)$//;
    push(@INC, $base_dir . "/lib/perl5");
    push(@INC, $base_dir . "/externals/SOptions");
    push(@INC, $base_dir . "/externals/SUsage");
}

use POSIX qw(sysconf);

use SOptions qw(getOptions);
use SUsage qw(usage);

my $debug = 0;
my $arg_max = sysconf( &POSIX::_SC_ARG_MAX );

my $xml_head = '<?xml ';

my $tmp_base = '/tmp';
my $prefix = basename( $0 ) . '_';
my $suffix = '.xml';
my $digits = 4; # Number of decomal digits used to number the split files.

my $nargs; # Number of arguments to present to the executed
           # command. Default is 'undef', which means "stuff as many
           # arguments to the command line as it can accept".

my $print_command = 0;
my $ask_before_running = 0;
my $replacement_string;

#* USAGE:
#*     $0 --options input1.xmlcat input*.xmlcat
#*     $0 --options < input.xmlcat
#* 
#* OPTIONS:
#*    -D, --digits 4         Use specified number of digits (0-paded) to number files.
#*    -i, --replace          Replace '{}' with each file name in the command.
#*    -I XYZ                 Replace 'XYZ' with each file name in the command.
#*    -n, --nargs 10         Specify number of arguments for each run (default - unlimited).
#*    -p, --prefix xmlxargs_ Specify file prefix. Prefix may contain '/' after exisitng dirs.
#*    -s, --suffix .xml      Specify the suffix (extension) of the created files.
#*    -d, --tmp-dir /tmp     Specify name of the temporary directory. The directory must exist.
#*    --help,--usage         Print a short usage message (this message) and exit.
#*    --debug, --no-debug    Print/do not print internal debug values.
#**

my @command;

while (@ARGV) {
    local $_ = $ARGV[0];
    if( /^(-n|--max-args|--max-arg|--max-ar|--max-a|--max|--ma|--m)$/ ) {
        $nargs = $ARGV[1]; shift(@ARGV); next;
    }
    if( /^(-D|--digits|--digit|--digi|--dig|--di|--d)$/ ) {
        $digits = $ARGV[1]; shift(@ARGV); next;
    }
    if( /^(-i|--repace|--repac|--repa|--rep|--re|--r)$/ ) {
        $replacement_string = '{}'; next;
    }
    if( /^-I$/ ) {
        $replacement_string = $ARGV[1]; shift(@ARGV); next;
    }
    if( /^(-p|--prefix|--prefi|--pref|--pre|--pr|--p)$/ ) {
        $prefix = $ARGV[1]; shift(@ARGV); next;
    }
    if( /^(-n|
           --max-args|--max-arg|--max-ar|--max-a|--max|--ma|--m
           --nargs|--narg|--nar|--na|--n
          )$/x ) {
        $nargs = $ARGV[1]; shift(@ARGV); next;
    }
    if( /^(-s|--suffix|--suffi|--suff|--suf|--su|--s)$/ ) {
        $suffix = $ARGV[1]; shift(@ARGV); next;
    }
    if( /^(-d|--tmp-directory|--tmp-director|--tmp-directo|
           --tmp-direct|--tmp-direc|--tmp-dire|--tmp-dir|--tmp-di|--tmp-d|
           --tmp|--tm|--t)$/x ) {
        $tmp_base = $ARGV[1]; shift(@ARGV); next;
    }
    if( /^(-t|--verbose|--verbos|--verbo|--verb|--ver|--ve|--v)$/ ) {
        ## print ">>>> '-t': \@ARGV = @ARGV\n";
        $print_command = 1; next;
    }
    if( /^(--options|--option|--optio|--opti|--opt|--op|--o)$/ ) {
        print "$0: The '--options' option is a placehoder.\n";
        print "$0: It should be replaced by one of the following options:\n";
        ## SUsage::usage;
        open( SCRIPT, $0 ) or die $!;
        while( <SCRIPT> ) {
            if( /^#\*\s+OPTIONS:/../^#\*\*/ ) {
                s/^#\*\s+OPTIONS://;
                s/^#\*\*?\s+//;
                print;
            }
        }
        close( SCRIPT );
        exit;
    }
    if( /^(--help|--usage)$/ ) {
        SUsage::usage; exit;
    }
    if( /^(--debug|--debu|--deb|--de|--d)$/ ) {
        $debug = 1; next;
    }
    if( /^(--no-debug|--no-debu|--no-deb|--no-de|--no-d|--no|--n)$/ ) {
        $debug = 0; next;
    }
    if( /^-/ ) {
        print STDERR "$0: unknown option '$_'\n";
        exit( 1 );
    }
    if( ! /^-/ ) {
        @command = @ARGV;
        ## print ">>>> \@command = @command\n";
        @ARGV = ();
    }
} continue {
    if( @ARGV ) {
        local $, = ' ';
        ## print ">>>> \@ARGV = @ARGV\n";
        shift(@ARGV);
    }
}

print STDERR "$0: DEBUG \$arg_max = $arg_max\n" if $debug;

# The redefinition of '$/' must be done after the option processing,
# otherwise 'SUsage::usage', '--help' and '--options' options will not
# work as expected.

local $/ = $xml_head;

my $format = sprintf( "%%0%dd", $digits );

$tmp_base =~ s/\/*$//g; # Remove trailing slashes.

use File::Basename qw(basename);
my $tmp_dir = $tmp_base . '/' . 'tmp-' . basename($0) . '-' . $$;

mkdir $tmp_dir;

my @arguments = ();
my $command_length = 0;
my $arguments_length = 0;

for( @command ) {
    $command_length += length( $_ );
}
$command_length += int(@command);

my $n = 1;
while(<>) {
    s/\Q$xml_head\E$//;
    next if $_ eq "";
    my $filename = $tmp_dir . '/' .
        $prefix . sprintf( $format, $n ) . $suffix;
    my $next_filename = $tmp_dir . '/' .
        $prefix . sprintf( $format, $n+1 ) . $suffix;

    open( my $fh, ">$filename" ) or
        die "could not open file '$filename' for writing: $!";
    print $fh $xml_head, $_;
    close($fh);

    $arguments_length += length($filename) + 1;

    my @actual_command;
    if( $replacement_string ) {
        @actual_command = map {
            my $l = $_;
            $l =~ s/\Q$replacement_string\E/$filename/g;
            $l }
        @command;
    } else {
        push( @arguments, $filename );
    }

    my $cmd_line_length = $command_length + $arguments_length;

    if( eof() ||
        $cmd_line_length > $arg_max - length($next_filename) ||
        (defined $nargs && int(@arguments) >= $nargs) ||
        defined $replacement_string ) {

        if( !defined $replacement_string ) {
            @actual_command = (@command, @arguments);
        }

        if( $print_command ) {
            local $, = ' ';
            local $\ = "\n";
            print STDERR @actual_command;
        }

        system @actual_command;

        unlink @arguments;
        @arguments = ();
        $arguments_length = 0;
    }
    
    $n++;
}

# clean up the temporary directory:
unlink glob "$tmp_dir/*";
rmdir $tmp_dir; 
